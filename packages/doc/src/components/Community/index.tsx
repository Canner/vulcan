import React from 'react';
import axios from 'axios';
import dayjs from 'dayjs';
import clsx from 'clsx';
import Link from '@docusaurus/Link';
import styles from './styles.module.css';
import GitHubImageUrl from '@site/static/img/github-icon.png';

dayjs.extend(require('dayjs/plugin/relativeTime'));

const Discord = require('@site/static/img/discord.svg').default;
const GitHub = require('@site/static/img/github.svg').default;

interface GitHubIssueItem {
  url: string;
  html_url: string;
  user: {
    avatar_url: string;
    login: string;
  };
  title: string;
  content: any;
  updated_at: string;
  avatarUrl: string;
  body: string;
}

const GITHUB_MAPPING_DATA = {
  'issues/138': (
    <>
      What’s the problem you're trying to solve: ClickHouse blazing fast
      analytics database <br />I would like to support easy analytics API create
      with our great project
      <br />
      Describe the solution you’d like:
      https://clickhouse.com/docs/en/integrations/language-clients/nodejs
    </>
  ),
  'pulls/160': (
    <>
      Support the VulcanSQL Catalog user interface for retrieving data in a more
      efficient and user-friendly manner.
    </>
  ),
  'pulls/163': (
    <>
      This pull request implemented the snowflake export function to export the
      selected data to the local dir in parquet format. <br />
      export flow:
      <br />
      - Use the snowflake "COPY INTO..." command to convert the selected data
      into parquet format and stored in the user stage. This request will have a
      UUID generated by Snowflake, we will append this unique id to the stage
      file name to prevent concurrent copy requests with the same name which
      Snowflake will throw an error.
      <br />
      - Use the snowflake "GET ..." command to download the parquet file stored
      in the user stage to the local directory. We Use the "pattern" parameter
      in this command and filter out the file with the unique id.
      <br />- Use the snowflake "Remove ..." command to remove the parquet file
      in the user stage to avoid increasing costs. We Use the "pattern"
      parameter in this command and filter out the file with the unique id.
    </>
  ),
  'issues/143': (
    <>
      I have been trying to connect VulcanSQL with BigQuery but receive an error
      'Not found'.
      <br />
      Also, not getting any endpoints in /localhost/doc
      <br />
      The credentials file is working fine as I tested the connection with
      DBeaver.
      <br />
      profiles, vulcan, sql and yaml files are at the below link.
      <br />
      Files:
      https://drive.google.com/drive/folders/1g1lyEG32x63hAzrIo2JK8vFAk5GpNC1U?usp=sharing
    </>
  ),
  'pulls/140': (
    <>
      We can generate different queries depending on the user attribute, so it
      is easy to mask some columns manually
      <br />
      But manually masking each column might be annoying and unpredictable, we
      should provide "masking" tag with some masking functions.
    </>
  ),
  'pulls/131': (
    <>
      BigQuery is one of the most commonly used warehouses, we should add driver
      support.
      <br />
      Add BigQuery data source and update the document.
    </>
  ),
};

function GitHubCard({
  html_url,
  user: { avatar_url: avatarUrl, login: uid },
  title,
  content,
  updated_at,
  body,
}: GitHubIssueItem): JSX.Element {
  return (
    <div className={`col col--4 ${styles.gitHubCard}`}>
      <Link className={styles.cardMeta} to={html_url}>
        <div className={clsx('card', styles.cardBlock)}>
          <div className="card__header">
            <div className={`${styles.cardAvatarBlock}`}>
              <img
                alt={uid}
                className={`avatar__photo ${styles.cardAvatar}`}
                src={avatarUrl}
                loading="lazy"
              />
              <div className={clsx('avatar__intro', styles.cardMeta)}>
                <strong className="avatar__name">{uid}</strong>
                <span>{dayjs(updated_at).fromNow()}</span>
              </div>
              <img
                src={GitHubImageUrl}
                className={`avatar__photo ${styles.gitHubIcon}`}
                alt="GitHub Icon"
              />
            </div>
          </div>
          <div className={clsx('card__body', styles.cardContent)}>
            <strong>{title}</strong>
            <br />
            <p>{body}</p>
          </div>
        </div>
      </Link>
    </div>
  );
}

function GitHubSection({ data: gitHubIssueColumns }) {
  return (
    <div className={clsx(styles.githubSection)}>
      {gitHubIssueColumns.map((item) => (
        <GitHubCard {...item} key={item.url} />
      ))}
    </div>
  );
}

export default function Community(): JSX.Element {
  const [data, setData] = React.useState([]);

  React.useEffect(() => {
    const fetchGitHubData = async () => {
      const data = await Promise.all(
        Object.keys(GITHUB_MAPPING_DATA).map(async (item) => {
          try {
            const response = await axios.get(
              `https://api.github.com/repos/Canner/vulcan-sql/${item}`
            );
            return {
              ...response.data,
              body: GITHUB_MAPPING_DATA[item],
            };
          } catch (error) {
            return { item, error };
          }
        })
      );
      setData(data);
    };

    fetchGitHubData();
  }, []);

  return (
    <section className={styles.communitySection}>
      <h1 className={`text--center ${styles.title}`}>Join the Community</h1>
      <div className={`text--center ${styles.descriptionBlock}`}>
        <div className={`text--center ${styles.description}`}>
          Join the discord group to chat with the developers and directly
          connect with the VulcanSQL team.
        </div>
        <div className={`buttons ${styles.buttonContainer}`}>
          <Link
            className={`button button--outline ${styles.actionButton}`}
            to="https://discord.gg/ztDz8DCmG4"
          >
            <Discord className={styles.actionIcon} role="img" />
            Discord
          </Link>
          <Link
            className={`button button--outline ${styles.actionButton}`}
            to="https://vulcansql.com/docs/intro"
          >
            <GitHub className={styles.actionIcon} role="img" />
            GitHub
          </Link>
        </div>
      </div>
      <GitHubSection data={data} />
    </section>
  );
}
