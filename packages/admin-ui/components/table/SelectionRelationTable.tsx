import { forwardRef } from 'react';
import styled from 'styled-components';
import { Col, Row, RowProps, Table, Typography } from 'antd';
import type { ColumnsType, TableProps } from 'antd/es/table';
import { getJoinTypeText } from '@vulcan-sql/admin-ui/utils/data';
import { JOIN_TYPE } from '@vulcan-sql/admin-ui/utils/enum';
import { ModelIcon } from '@vulcan-sql/admin-ui/utils/icons';

const { Text } = Typography;

const StyledTable = styled(Table)`
  .ant-table-thead > tr > th {
    color: var(--gray-7);
    background-color: white;
  }
`;

const StyledRow = styled(Row).attrs<{
  $isRowSelection: boolean;
}>((props) => ({
  className: `${props.$isRowSelection ? '' : 'ml-1'}`,
}))`` as React.ForwardRefExoticComponent<
  RowProps & React.RefAttributes<HTMLDivElement> & { $isRowSelection: boolean }
>;

interface ModalFieldProps {
  model: string;
  field: string;
}

export interface RelationsDataType {
  fromField: ModalFieldProps;
  isAutoGenerated: boolean;
  relationName: string;
  relationType: JOIN_TYPE;
  toField: ModalFieldProps;
}

interface SelectionRelationTableProps {
  columns?: ColumnsType<RelationsDataType>;
  dataSource: RelationsDataType[];
  enableRowSelection?: boolean;
  extra?: React.ReactNode;
  onChange?: (value: any | null) => void;
  title: string;
}

export const defaultColumns: ColumnsType<RelationsDataType> = [
  {
    title: 'From field',
    dataIndex: 'fromField',
    key: 'fromField',
    render: (fromField) => `${fromField.model}.${fromField.field}`,
    width: '35%',
  },
  {
    title: 'To field',
    dataIndex: 'toField',
    key: 'toField',
    render: (toField) => `${toField.model}.${toField.field}`,
    width: '35%',
  },
  {
    title: 'Relation',
    dataIndex: 'relationType',
    key: 'relationType',
    render: (type, relation) => (
      <>
        {getJoinTypeText(type)}
        {relation.isAutoGenerated && (
          <Text className="pl-1" type="secondary">
            (auto-generated)
          </Text>
        )}
      </>
    ),
    width: '30%',
  },
];

function SelectionRelationTable(
  props: SelectionRelationTableProps,
  ref: React.Ref<any>
) {
  const {
    columns = defaultColumns,
    dataSource,
    extra,
    enableRowSelection,
    onChange,
    title,
  } = props;

  const isRowSelection = Boolean(enableRowSelection);

  const rowSelection: TableProps<RelationsDataType>['rowSelection'] =
    isRowSelection
      ? {
          type: 'checkbox',
          onChange: (
            _selectedRowKeys: React.Key[],
            selectedRows: RelationsDataType[]
          ) => {
            onChange && onChange(selectedRows);
          },
        }
      : undefined;

  return (
    <StyledTable
      ref={ref}
      className="ant-table-has-header"
      columns={columns}
      dataSource={dataSource}
      rowKey={(record) => JSON.stringify(record)}
      rowSelection={rowSelection}
      title={() => (
        <StyledRow wrap={false} gutter={8} $isRowSelection={isRowSelection}>
          <Col flex="1 0">
            <ModelIcon className="pr-2" style={{ fontSize: 16 }} />
            {title}
          </Col>
          <Col flex="none">{extra}</Col>
        </StyledRow>
      )}
      pagination={false}
    />
  );
}

export default forwardRef(SelectionRelationTable);
