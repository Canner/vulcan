import { useState } from 'react';
import Link from 'next/link';
import { omit } from 'lodash';
import { Button, Col, Popconfirm, Row, Space, Typography } from 'antd';
import type { ColumnsType } from 'antd/es/table';
import { DeleteOutlined, EditOutlined, PlusOutlined } from '@ant-design/icons';
import SelectionRelationTable, {
  defaultColumns,
  RelationsDataType,
} from '@vulcan-sql/admin-ui/components/table/SelectionRelationTable';
import useModalAction from '@vulcan-sql/admin-ui/hooks/useModalAction';
import AddRelationModal from '@vulcan-sql/admin-ui/components/modals/AddRelationModal';

const { Title, Text } = Typography;

export interface SelectedRecommendRelationsProps {
  [modalName: string]: RelationsDataType[];
}

interface Props {
  selectedRecommendRelations: SelectedRecommendRelationsProps;
  onNext: (data: { relations: SelectedRecommendRelationsProps }) => void;
  onBack: () => void;
}

interface EditableRelationTableProps {
  modalName: string;
  onSetRelation: (payload: {
    modalName: string;
    defaultValue?: RelationsDataType;
  }) => void;
  onDeleteRow: (modalName: string, selectedRelation: RelationsDataType) => void;
  relations: RelationsDataType[];
}

function EditableRelationTable(props: EditableRelationTableProps) {
  const { modalName, onSetRelation, onDeleteRow, relations } = props;

  const columns: ColumnsType<RelationsDataType> = [
    ...defaultColumns,
    {
      title: '',
      key: 'action',
      width: 48,
      align: 'center',
      render: (_, record) => (
        <Space size={[16, 0]}>
          <EditOutlined
            onClick={() =>
              onSetRelation({
                modalName,
                defaultValue: record,
              })
            }
          />
          <Popconfirm
            title="Sure to delete?"
            okText="Delete"
            okButtonProps={{ danger: true }}
            onConfirm={() => onDeleteRow(modalName, record)}
          >
            <DeleteOutlined />
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div className="mt-6">
      <SelectionRelationTable
        columns={columns}
        dataSource={relations}
        title={modalName}
        extra={
          <Button
            onClick={() => onSetRelation({ modalName })}
            size="small"
            title="Add relation"
          >
            <PlusOutlined />
            Add relation
          </Button>
        }
      />
    </div>
  );
}

export default function DefineRelations(props: Props) {
  const { selectedRecommendRelations, onBack, onNext } = props;

  const [relations, setRelations] = useState<SelectedRecommendRelationsProps>(
    selectedRecommendRelations
  );

  const [selectedRelation, setSelectedRelation] = useState<{
    modalName: string;
    defaultValue?: RelationsDataType;
  }>(null);

  const addRelationModal = useModalAction();

  const onAddRelation = (modalName: string, relation: RelationsDataType) => {
    const newRelations = {
      ...relations,
      [modalName]: [
        ...relations[modalName],
        { ...relation, isAutoGenerated: false },
      ],
    };
    setRelations(newRelations);
  };

  const onCloseModal = () => {
    setSelectedRelation(null);
    addRelationModal.closeModal();
  };

  const onDeleteRow = (
    modalName: string,
    selectedRelation: RelationsDataType
  ) => {
    const newRelations = {
      ...relations,
      [modalName]: relations[modalName].filter(
        (relation) =>
          JSON.stringify(relation) !== JSON.stringify(selectedRelation)
      ),
    };
    setRelations(newRelations);
  };

  const onSetRelation = (payload: {
    modalName: string;
    defaultValue?: RelationsDataType;
  }) => {
    setSelectedRelation(payload);
    addRelationModal.openModal();
  };

  const onUpdateRelation = (
    modalName: string,
    originalRelationValue: RelationsDataType,
    newRelationValue: RelationsDataType
  ) => {
    const isOriginalRelation = selectedRecommendRelations[modalName].find(
      (relation) =>
        JSON.stringify(omit(relation, ['isAutoGenerated'])) ===
        JSON.stringify(newRelationValue)
    );

    const isAutoGenerated = isOriginalRelation?.isAutoGenerated || false;

    const newRelations = {
      ...relations,
      [modalName]: relations[modalName].map((relation) => {
        if (
          JSON.stringify(relation) === JSON.stringify(originalRelationValue)
        ) {
          return { ...newRelationValue, isAutoGenerated };
        }
        return relation;
      }),
    };
    setRelations(newRelations);
  };

  const submit = () => {
    onNext && onNext({ relations });
  };

  return (
    <div>
      <Title level={1} className="mb-3">
        Define the relations
      </Title>
      <Text>
        After creating your data models in step 2, you can specify how they
        should be joined together by defining the relationships. We will
        automatically create the relations based on the 'primary' and 'foreign'
        in your data sources.{` `}
        <Link href="" target="_blank" rel="noopener noreferrer">
          Learn more
        </Link>
      </Text>
      <div className="my-6">
        {Object.entries(relations).map(([modalName, relations = []]) => (
          <EditableRelationTable
            key={`${modalName}-${relations.length}`}
            modalName={modalName}
            relations={relations}
            onSetRelation={(payload) => onSetRelation(payload)}
            onDeleteRow={onDeleteRow}
          />
        ))}
      </div>
      <Row gutter={16} className="pt-6">
        <Col span={12}>
          <Button onClick={onBack} size="large" block>
            Back
          </Button>
        </Col>
        <Col className="text-right" span={12}>
          <Button type="primary" size="large" block onClick={submit}>
            Next
          </Button>
        </Col>
      </Row>
      <AddRelationModal
        model={selectedRelation?.modalName}
        {...addRelationModal.state}
        onSubmit={async (values) => {
          if (selectedRelation?.defaultValue) {
            onUpdateRelation(
              selectedRelation.modalName,
              selectedRelation.defaultValue,
              values
            );
          } else {
            onAddRelation(values.fromField.model, values);
          }
          setSelectedRelation(null);
        }}
        onClose={onCloseModal}
        allowSetDescription={false}
        defaultValue={
          selectedRelation?.defaultValue
            ? omit(selectedRelation.defaultValue, ['isAutoGenerated'])
            : undefined
        }
      />
    </div>
  );
}
